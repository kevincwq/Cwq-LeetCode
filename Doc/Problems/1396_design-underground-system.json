{"data":{"question":{"questionId":"1512","questionFrontendId":"1396","boundTopicId":null,"title":"Design Underground System","titleSlug":"design-underground-system","content":"<p>Implement the class <code>UndergroundSystem</code> that supports three methods:</p>\n\n<p>1.<code>&nbsp;checkIn(int id, string stationName, int t)</code></p>\n\n<ul>\n\t<li>A customer with id card equal to <code>id</code>, gets in the station <code>stationName</code> at time <code>t</code>.</li>\n\t<li>A customer&nbsp;can only be checked into one place at a time.</li>\n</ul>\n\n<p>2.<code>&nbsp;checkOut(int id, string stationName, int t)</code></p>\n\n<ul>\n\t<li>A customer with id card equal to <code>id</code>, gets out from the station <code>stationName</code> at time <code>t</code>.</li>\n</ul>\n\n<p>3.&nbsp;<code>getAverageTime(string startStation, string endStation)</code>&nbsp;</p>\n\n<ul>\n\t<li>Returns the average time to travel between the <code>startStation</code> and the <code>endStation</code>.</li>\n\t<li>The average time is computed from all the previous traveling from <code>startStation</code> to <code>endStation</code> that happened <strong>directly</strong>.</li>\n\t<li>Call to <code>getAverageTime</code> is always valid.</li>\n</ul>\n\n<p>You can assume all calls to <code>checkIn</code> and <code>checkOut</code> methods are consistent. That is, if a customer gets in at time <strong>t<sub>1</sub></strong> at some station, then it gets out at time <strong>t<sub>2</sub></strong> with <strong>t<sub>2</sub> &gt; t<sub>1</sub></strong>.&nbsp;All events happen in chronological order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;UndergroundSystem&quot;,&quot;checkIn&quot;,&quot;checkIn&quot;,&quot;checkIn&quot;,&quot;checkOut&quot;,&quot;checkOut&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;,&quot;getAverageTime&quot;,&quot;checkIn&quot;,&quot;getAverageTime&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;]\n[[],[45,&quot;Leyton&quot;,3],[32,&quot;Paradise&quot;,8],[27,&quot;Leyton&quot;,10],[45,&quot;Waterloo&quot;,15],[27,&quot;Waterloo&quot;,20],[32,&quot;Cambridge&quot;,22],[&quot;Paradise&quot;,&quot;Cambridge&quot;],[&quot;Leyton&quot;,&quot;Waterloo&quot;],[10,&quot;Leyton&quot;,24],[&quot;Leyton&quot;,&quot;Waterloo&quot;],[10,&quot;Waterloo&quot;,38],[&quot;Leyton&quot;,&quot;Waterloo&quot;]]\n\n<strong>Output</strong>\n[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\n\n<strong>Explanation</strong>\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, &quot;Leyton&quot;, 3);\nundergroundSystem.checkIn(32, &quot;Paradise&quot;, 8);\nundergroundSystem.checkIn(27, &quot;Leyton&quot;, 10);\nundergroundSystem.checkOut(45, &quot;Waterloo&quot;, 15);\nundergroundSystem.checkOut(27, &quot;Waterloo&quot;, 20);\nundergroundSystem.checkOut(32, &quot;Cambridge&quot;, 22);\nundergroundSystem.getAverageTime(&quot;Paradise&quot;, &quot;Cambridge&quot;); &nbsp; &nbsp; &nbsp; // return 14.00000. There was only one travel from &quot;Paradise&quot; (at time 8) to &quot;Cambridge&quot; (at time 22)\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Waterloo&quot;); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// return 11.00000. There were two travels from &quot;Leyton&quot; to &quot;Waterloo&quot;, a customer with id=45 from time=3 to time=15 and a customer with id=27 from time=10 to time=20. So the average time is ( (15-3) + (20-10) ) / 2 = 11.00000\nundergroundSystem.checkIn(10, &quot;Leyton&quot;, 24);\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Waterloo&quot;); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// return 11.00000\nundergroundSystem.checkOut(10, &quot;Waterloo&quot;, 38);\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Waterloo&quot;); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// return 12.00000\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;UndergroundSystem&quot;,&quot;checkIn&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;,&quot;checkIn&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;,&quot;checkIn&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;]\n[[],[10,&quot;Leyton&quot;,3],[10,&quot;Paradise&quot;,8],[&quot;Leyton&quot;,&quot;Paradise&quot;],[5,&quot;Leyton&quot;,10],[5,&quot;Paradise&quot;,16],[&quot;Leyton&quot;,&quot;Paradise&quot;],[2,&quot;Leyton&quot;,21],[2,&quot;Paradise&quot;,30],[&quot;Leyton&quot;,&quot;Paradise&quot;]]\n\n<strong>Output</strong>\n[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\n\n<strong>Explanation</strong>\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, &quot;Leyton&quot;, 3);\nundergroundSystem.checkOut(10, &quot;Paradise&quot;, 8);\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Paradise&quot;); // return 5.00000\nundergroundSystem.checkIn(5, &quot;Leyton&quot;, 10);\nundergroundSystem.checkOut(5, &quot;Paradise&quot;, 16);\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Paradise&quot;); // return 5.50000\nundergroundSystem.checkIn(2, &quot;Leyton&quot;, 21);\nundergroundSystem.checkOut(2, &quot;Paradise&quot;, 30);\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Paradise&quot;); // return 6.66667\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>There will be at most <code><font face=\"monospace\">20000</font></code>&nbsp;operations.</li>\n\t<li><code>1 &lt;= id, t &lt;= 10^6</code></li>\n\t<li>All strings consist of uppercase, lowercase English letters and digits.</li>\n\t<li><code>1 &lt;=&nbsp;stationName.length &lt;= 10</code></li>\n\t<li>Answers within&nbsp;<code>10^-5</code>&nbsp;of the actual value will be accepted as correct.</li>\n</ul>\n","translatedTitle":null,"translatedContent":null,"isPaidOnly":false,"difficulty":"Medium","likes":262,"dislikes":29,"isLiked":null,"similarQuestions":"[]","contributors":[],"topicTags":[{"name":"Design","slug":"design","translatedName":null,"__typename":"TopicTagNode"}],"companyTagStats":null,"codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class UndergroundSystem {\npublic:\n    UndergroundSystem() {\n        \n    }\n    \n    void checkIn(int id, string stationName, int t) {\n        \n    }\n    \n    void checkOut(int id, string stationName, int t) {\n        \n    }\n    \n    double getAverageTime(string startStation, string endStation) {\n        \n    }\n};\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem* obj = new UndergroundSystem();\n * obj->checkIn(id,stationName,t);\n * obj->checkOut(id,stationName,t);\n * double param_3 = obj->getAverageTime(startStation,endStation);\n */","__typename":"CodeSnippetNode"},{"lang":"Java","langSlug":"java","code":"class UndergroundSystem {\n\n    public UndergroundSystem() {\n        \n    }\n    \n    public void checkIn(int id, String stationName, int t) {\n        \n    }\n    \n    public void checkOut(int id, String stationName, int t) {\n        \n    }\n    \n    public double getAverageTime(String startStation, String endStation) {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem obj = new UndergroundSystem();\n * obj.checkIn(id,stationName,t);\n * obj.checkOut(id,stationName,t);\n * double param_3 = obj.getAverageTime(startStation,endStation);\n */","__typename":"CodeSnippetNode"},{"lang":"Python","langSlug":"python","code":"class UndergroundSystem(object):\n\n    def __init__(self):\n        \n\n    def checkIn(self, id, stationName, t):\n        \"\"\"\n        :type id: int\n        :type stationName: str\n        :type t: int\n        :rtype: None\n        \"\"\"\n        \n\n    def checkOut(self, id, stationName, t):\n        \"\"\"\n        :type id: int\n        :type stationName: str\n        :type t: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getAverageTime(self, startStation, endStation):\n        \"\"\"\n        :type startStation: str\n        :type endStation: str\n        :rtype: float\n        \"\"\"\n        \n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)","__typename":"CodeSnippetNode"},{"lang":"Python3","langSlug":"python3","code":"class UndergroundSystem:\n\n    def __init__(self):\n        \n\n    def checkIn(self, id: int, stationName: str, t: int) -> None:\n        \n\n    def checkOut(self, id: int, stationName: str, t: int) -> None:\n        \n\n    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        \n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)","__typename":"CodeSnippetNode"},{"lang":"C","langSlug":"c","code":"\n\n\ntypedef struct {\n    \n} UndergroundSystem;\n\n\nUndergroundSystem* undergroundSystemCreate() {\n    \n}\n\nvoid undergroundSystemCheckIn(UndergroundSystem* obj, int id, char * stationName, int t) {\n  \n}\n\nvoid undergroundSystemCheckOut(UndergroundSystem* obj, int id, char * stationName, int t) {\n  \n}\n\ndouble undergroundSystemGetAverageTime(UndergroundSystem* obj, char * startStation, char * endStation) {\n  \n}\n\nvoid undergroundSystemFree(UndergroundSystem* obj) {\n    \n}\n\n/**\n * Your UndergroundSystem struct will be instantiated and called as such:\n * UndergroundSystem* obj = undergroundSystemCreate();\n * undergroundSystemCheckIn(obj, id, stationName, t);\n \n * undergroundSystemCheckOut(obj, id, stationName, t);\n \n * double param_3 = undergroundSystemGetAverageTime(obj, startStation, endStation);\n \n * undergroundSystemFree(obj);\n*/","__typename":"CodeSnippetNode"},{"lang":"C#","langSlug":"csharp","code":"public class UndergroundSystem {\n\n    public UndergroundSystem() {\n        \n    }\n    \n    public void CheckIn(int id, string stationName, int t) {\n        \n    }\n    \n    public void CheckOut(int id, string stationName, int t) {\n        \n    }\n    \n    public double GetAverageTime(string startStation, string endStation) {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem obj = new UndergroundSystem();\n * obj.CheckIn(id,stationName,t);\n * obj.CheckOut(id,stationName,t);\n * double param_3 = obj.GetAverageTime(startStation,endStation);\n */","__typename":"CodeSnippetNode"},{"lang":"JavaScript","langSlug":"javascript","code":"\nvar UndergroundSystem = function() {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} stationName \n * @param {number} t\n * @return {void}\n */\nUndergroundSystem.prototype.checkIn = function(id, stationName, t) {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} stationName \n * @param {number} t\n * @return {void}\n */\nUndergroundSystem.prototype.checkOut = function(id, stationName, t) {\n    \n};\n\n/** \n * @param {string} startStation \n * @param {string} endStation\n * @return {number}\n */\nUndergroundSystem.prototype.getAverageTime = function(startStation, endStation) {\n    \n};\n\n/** \n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */","__typename":"CodeSnippetNode"},{"lang":"Ruby","langSlug":"ruby","code":"class UndergroundSystem\n    def initialize()\n        \n    end\n\n\n=begin\n    :type id: Integer\n    :type station_name: String\n    :type t: Integer\n    :rtype: Void\n=end\n    def check_in(id, station_name, t)\n        \n    end\n\n\n=begin\n    :type id: Integer\n    :type station_name: String\n    :type t: Integer\n    :rtype: Void\n=end\n    def check_out(id, station_name, t)\n        \n    end\n\n\n=begin\n    :type start_station: String\n    :type end_station: String\n    :rtype: Float\n=end\n    def get_average_time(start_station, end_station)\n        \n    end\n\n\nend\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem.new()\n# obj.check_in(id, station_name, t)\n# obj.check_out(id, station_name, t)\n# param_3 = obj.get_average_time(start_station, end_station)","__typename":"CodeSnippetNode"},{"lang":"Swift","langSlug":"swift","code":"\nclass UndergroundSystem {\n\n    init() {\n        \n    }\n    \n    func checkIn(_ id: Int, _ stationName: String, _ t: Int) {\n        \n    }\n    \n    func checkOut(_ id: Int, _ stationName: String, _ t: Int) {\n        \n    }\n    \n    func getAverageTime(_ startStation: String, _ endStation: String) -> Double {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * let obj = UndergroundSystem()\n * obj.checkIn(id, stationName, t)\n * obj.checkOut(id, stationName, t)\n * let ret_3: Double = obj.getAverageTime(startStation, endStation)\n */","__typename":"CodeSnippetNode"},{"lang":"Go","langSlug":"golang","code":"type UndergroundSystem struct {\n    \n}\n\n\nfunc Constructor() UndergroundSystem {\n    \n}\n\n\nfunc (this *UndergroundSystem) CheckIn(id int, stationName string, t int)  {\n    \n}\n\n\nfunc (this *UndergroundSystem) CheckOut(id int, stationName string, t int)  {\n    \n}\n\n\nfunc (this *UndergroundSystem) GetAverageTime(startStation string, endStation string) float64 {\n    \n}\n\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * obj := Constructor();\n * obj.CheckIn(id,stationName,t);\n * obj.CheckOut(id,stationName,t);\n * param_3 := obj.GetAverageTime(startStation,endStation);\n */","__typename":"CodeSnippetNode"},{"lang":"Scala","langSlug":"scala","code":"class UndergroundSystem() {\n\n    def checkIn(id: Int, stationName: String, t: Int) {\n        \n    }\n\n    def checkOut(id: Int, stationName: String, t: Int) {\n        \n    }\n\n    def getAverageTime(startStation: String, endStation: String): Double = {\n        \n    }\n\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */","__typename":"CodeSnippetNode"},{"lang":"Kotlin","langSlug":"kotlin","code":"class UndergroundSystem() {\n\n    fun checkIn(id: Int, stationName: String, t: Int) {\n        \n    }\n\n    fun checkOut(id: Int, stationName: String, t: Int) {\n        \n    }\n\n    fun getAverageTime(startStation: String, endStation: String): Double {\n        \n    }\n\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */","__typename":"CodeSnippetNode"},{"lang":"Rust","langSlug":"rust","code":"struct UndergroundSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl UndergroundSystem {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn check_in(&self, id: i32, station_name: String, t: i32) {\n        \n    }\n    \n    fn check_out(&self, id: i32, station_name: String, t: i32) {\n        \n    }\n    \n    fn get_average_time(&self, start_station: String, end_station: String) -> f64 {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * let obj = UndergroundSystem::new();\n * obj.check_in(id, stationName, t);\n * obj.check_out(id, stationName, t);\n * let ret_3: f64 = obj.get_average_time(startStation, endStation);\n */","__typename":"CodeSnippetNode"},{"lang":"PHP","langSlug":"php","code":"class UndergroundSystem {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $id\n     * @param String $stationName\n     * @param Integer $t\n     * @return NULL\n     */\n    function checkIn($id, $stationName, $t) {\n        \n    }\n  \n    /**\n     * @param Integer $id\n     * @param String $stationName\n     * @param Integer $t\n     * @return NULL\n     */\n    function checkOut($id, $stationName, $t) {\n        \n    }\n  \n    /**\n     * @param String $startStation\n     * @param String $endStation\n     * @return Float\n     */\n    function getAverageTime($startStation, $endStation) {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * $obj = UndergroundSystem();\n * $obj->checkIn($id, $stationName, $t);\n * $obj->checkOut($id, $stationName, $t);\n * $ret_3 = $obj->getAverageTime($startStation, $endStation);\n */","__typename":"CodeSnippetNode"},{"lang":"TypeScript","langSlug":"typescript","code":"class UndergroundSystem {\n    constructor() {\n\n    }\n\n    checkIn(id: number, stationName: string, t: number): void {\n\n    }\n\n    checkOut(id: number, stationName: string, t: number): void {\n\n    }\n\n    getAverageTime(startStation: string, endStation: string): number {\n\n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */","__typename":"CodeSnippetNode"}],"stats":"{\"totalAccepted\": \"20.7K\", \"totalSubmission\": \"31.1K\", \"totalAcceptedRaw\": 20685, \"totalSubmissionRaw\": 31091, \"acRate\": \"66.5%\"}","hints":["Use two hash tables. The first to save the check-in time for a customer and the second to update the total time between two stations."],"solution":{"id":"921","canSeeDetail":false,"paidOnly":true,"__typename":"ArticleNode"},"status":null,"sampleTestCase":"[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]","metaData":"{\n  \"classname\": \"UndergroundSystem\",\n  \"constructor\": {\n    \"params\": []\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"id\"\n        },\n        {\n          \"type\": \"string\",\n          \"name\": \"stationName\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"t\"\n        }\n      ],\n      \"name\": \"checkIn\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"id\"\n        },\n        {\n          \"type\": \"string\",\n          \"name\": \"stationName\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"t\"\n        }\n      ],\n      \"name\": \"checkOut\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"startStation\"\n        },\n        {\n          \"type\": \"string\",\n          \"name\": \"endStation\"\n        }\n      ],\n      \"name\": \"getAverageTime\",\n      \"return\": {\n        \"type\": \"double\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}","judgerAvailable":true,"judgeType":"large","mysqlSchemas":[],"enableRunCode":true,"enableTestMode":false,"enableDebugger":true,"envInfo":"{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 10 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.3.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.2.5</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.13</code>.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.8</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.40.0</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.3.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}","libraryUrl":null,"adminUrl":null,"__typename":"QuestionNode"}}}
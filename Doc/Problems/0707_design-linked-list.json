{"data":{"question":{"questionId":"838","questionFrontendId":"707","boundTopicId":null,"title":"Design Linked List","titleSlug":"design-linked-list","content":"<p>Design your&nbsp;implementation of the linked list. You can choose to use a singly or doubly linked list.<br />\nA node in a singly&nbsp;linked list should have two attributes: <code>val</code>&nbsp;and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code>&nbsp;is&nbsp;a&nbsp;pointer/reference to the next node.<br />\nIf you want to use the doubly linked list,&nbsp;you will need&nbsp;one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are <strong>0-indexed</strong>.</p>\n\n<p>Implement the <code>MyLinkedList</code>&nbsp;class:</p>\n\n<ul>\n\t<li><code>MyLinkedList()</code>&nbsp;Initializes&nbsp;the&nbsp;<code>MyLinkedList</code> object.</li>\n\t<li><code>int get(int index)</code>&nbsp;Get the value of&nbsp;the <code>index<sup>th</sup></code>&nbsp;node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n\t<li><code>void addAtHead(int val)</code>&nbsp;Add a node of value <code>val</code>&nbsp;before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n\t<li><code>void addAtTail(int val)</code>&nbsp;Append a node of value <code>val</code>&nbsp;as the last element of the linked list.</li>\n\t<li><code>void addAtIndex(int index, int val)</code>&nbsp;Add a node of value <code>val</code>&nbsp;before the <code>index<sup>th</sup></code>&nbsp;node in the linked list.&nbsp;If <code>index</code>&nbsp;equals the length of the linked list, the node will be appended to the end of the linked list. If <code>index</code> is greater than the length, the node <strong>will not be inserted</strong>.</li>\n\t<li><code>void deleteAtIndex(int index)</code>&nbsp;Delete&nbsp;the <code>index<sup>th</sup></code>&nbsp;node in the linked list, if the index is valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]\n[[], [1], [3], [1, 2], [1], [1], [1]]\n<strong>Output</strong>\n[null, null, null, null, 2, null, 3]\n\n<strong>Explanation</strong>\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3\nmyLinkedList.get(1);              // return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n\t<li>Please do not use the built-in LinkedList library.</li>\n\t<li>At most <code>2000</code>&nbsp;calls will be made to&nbsp;<code>get</code>,&nbsp;<code>addAtHead</code>,&nbsp;<code>addAtTail</code>,&nbsp; <code>addAtIndex</code> and&nbsp;<code>deleteAtIndex</code>.</li>\n</ul>\n","translatedTitle":null,"translatedContent":null,"isPaidOnly":false,"difficulty":"Medium","likes":629,"dislikes":751,"isLiked":null,"similarQuestions":"[{\"title\": \"Design Skiplist\", \"titleSlug\": \"design-skiplist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]","contributors":[],"topicTags":[{"name":"Linked List","slug":"linked-list","translatedName":null,"__typename":"TopicTagNode"},{"name":"Design","slug":"design","translatedName":null,"__typename":"TopicTagNode"}],"companyTagStats":null,"codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class MyLinkedList {\npublic:\n    /** Initialize your data structure here. */\n    MyLinkedList() {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    int get(int index) {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    void addAtHead(int val) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    void addAtTail(int val) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    void addAtIndex(int index, int val) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    void deleteAtIndex(int index) {\n        \n    }\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */","__typename":"CodeSnippetNode"},{"lang":"Java","langSlug":"java","code":"class MyLinkedList {\n\n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    public int get(int index) {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    public void addAtHead(int val) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    public void addAtTail(int val) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    public void addAtIndex(int index, int val) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    public void deleteAtIndex(int index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */","__typename":"CodeSnippetNode"},{"lang":"Python","langSlug":"python","code":"class MyLinkedList(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def get(self, index):\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        :type index: int\n        :rtype: int\n        \"\"\"\n        \n\n    def addAtHead(self, val):\n        \"\"\"\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAtTail(self, val):\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        :type index: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)","__typename":"CodeSnippetNode"},{"lang":"Python3","langSlug":"python3","code":"class MyLinkedList:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        \"\"\"\n        \n\n    def addAtHead(self, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n        \"\"\"\n        \n\n    def addAtTail(self, val: int) -> None:\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        \"\"\"\n        \n\n    def addAtIndex(self, index: int, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n        \"\"\"\n        \n\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        \"\"\"\n        \n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)","__typename":"CodeSnippetNode"},{"lang":"C","langSlug":"c","code":"\n\n\ntypedef struct {\n    \n} MyLinkedList;\n\n/** Initialize your data structure here. */\n\nMyLinkedList* myLinkedListCreate() {\n    \n}\n\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\nint myLinkedListGet(MyLinkedList* obj, int index) {\n  \n}\n\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) {\n  \n}\n\n/** Append a node of value val to the last element of the linked list. */\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) {\n  \n}\n\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {\n  \n}\n\n/** Delete the index-th node in the linked list, if the index is valid. */\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {\n  \n}\n\nvoid myLinkedListFree(MyLinkedList* obj) {\n    \n}\n\n/**\n * Your MyLinkedList struct will be instantiated and called as such:\n * MyLinkedList* obj = myLinkedListCreate();\n * int param_1 = myLinkedListGet(obj, index);\n \n * myLinkedListAddAtHead(obj, val);\n \n * myLinkedListAddAtTail(obj, val);\n \n * myLinkedListAddAtIndex(obj, index, val);\n \n * myLinkedListDeleteAtIndex(obj, index);\n \n * myLinkedListFree(obj);\n*/","__typename":"CodeSnippetNode"},{"lang":"C#","langSlug":"csharp","code":"public class MyLinkedList {\n\n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    public int Get(int index) {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    public void AddAtHead(int val) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    public void AddAtTail(int val) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    public void AddAtIndex(int index, int val) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    public void DeleteAtIndex(int index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */","__typename":"CodeSnippetNode"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * Initialize your data structure here.\n */\nvar MyLinkedList = function() {\n    \n};\n\n/**\n * Get the value of the index-th node in the linked list. If the index is invalid, return -1. \n * @param {number} index\n * @return {number}\n */\nMyLinkedList.prototype.get = function(index) {\n    \n};\n\n/**\n * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtHead = function(val) {\n    \n};\n\n/**\n * Append a node of value val to the last element of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtTail = function(val) {\n    \n};\n\n/**\n * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtIndex = function(index, val) {\n    \n};\n\n/**\n * Delete the index-th node in the linked list, if the index is valid. \n * @param {number} index\n * @return {void}\n */\nMyLinkedList.prototype.deleteAtIndex = function(index) {\n    \n};\n\n/** \n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */","__typename":"CodeSnippetNode"},{"lang":"Ruby","langSlug":"ruby","code":"class MyLinkedList\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n        \n    end\n\n\n=begin\n    Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n        \n    end\n\n\n=begin\n    Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_head(val)\n        \n    end\n\n\n=begin\n    Append a node of value val to the last element of the linked list.\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_tail(val)\n        \n    end\n\n\n=begin\n    Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_index(index, val)\n        \n    end\n\n\n=begin\n    Delete the index-th node in the linked list, if the index is valid.\n    :type index: Integer\n    :rtype: Void\n=end\n    def delete_at_index(index)\n        \n    end\n\n\nend\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList.new()\n# param_1 = obj.get(index)\n# obj.add_at_head(val)\n# obj.add_at_tail(val)\n# obj.add_at_index(index, val)\n# obj.delete_at_index(index)","__typename":"CodeSnippetNode"},{"lang":"Swift","langSlug":"swift","code":"\nclass MyLinkedList {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    func get(_ index: Int) -> Int {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    func addAtHead(_ val: Int) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    func addAtTail(_ val: Int) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    func addAtIndex(_ index: Int, _ val: Int) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    func deleteAtIndex(_ index: Int) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList()\n * let ret_1: Int = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index, val)\n * obj.deleteAtIndex(index)\n */","__typename":"CodeSnippetNode"},{"lang":"Go","langSlug":"golang","code":"type MyLinkedList struct {\n    \n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyLinkedList {\n    \n}\n\n\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\nfunc (this *MyLinkedList) Get(index int) int {\n    \n}\n\n\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\nfunc (this *MyLinkedList) AddAtHead(val int)  {\n    \n}\n\n\n/** Append a node of value val to the last element of the linked list. */\nfunc (this *MyLinkedList) AddAtTail(val int)  {\n    \n}\n\n\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\nfunc (this *MyLinkedList) AddAtIndex(index int, val int)  {\n    \n}\n\n\n/** Delete the index-th node in the linked list, if the index is valid. */\nfunc (this *MyLinkedList) DeleteAtIndex(index int)  {\n    \n}\n\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */","__typename":"CodeSnippetNode"},{"lang":"Scala","langSlug":"scala","code":"class MyLinkedList() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    def get(index: Int): Int = {\n        \n    }\n\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    def addAtHead(`val`: Int) {\n        \n    }\n\n    /** Append a node of value val to the last element of the linked list. */\n    def addAtTail(`val`: Int) {\n        \n    }\n\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    def addAtIndex(index: Int, `val`: Int) {\n        \n    }\n\n    /** Delete the index-th node in the linked list, if the index is valid. */\n    def deleteAtIndex(index: Int) {\n        \n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */","__typename":"CodeSnippetNode"},{"lang":"Kotlin","langSlug":"kotlin","code":"class MyLinkedList() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    fun get(index: Int): Int {\n        \n    }\n\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    fun addAtHead(`val`: Int) {\n        \n    }\n\n    /** Append a node of value val to the last element of the linked list. */\n    fun addAtTail(`val`: Int) {\n        \n    }\n\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    fun addAtIndex(index: Int, `val`: Int) {\n        \n    }\n\n    /** Delete the index-th node in the linked list, if the index is valid. */\n    fun deleteAtIndex(index: Int) {\n        \n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */","__typename":"CodeSnippetNode"},{"lang":"Rust","langSlug":"rust","code":"struct MyLinkedList {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyLinkedList {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    fn get(&self, index: i32) -> i32 {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    fn add_at_head(&self, val: i32) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    fn add_at_tail(&self, val: i32) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    fn add_at_index(&self, index: i32, val: i32) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    fn delete_at_index(&self, index: i32) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList::new();\n * let ret_1: i32 = obj.get(index);\n * obj.add_at_head(val);\n * obj.add_at_tail(val);\n * obj.add_at_index(index, val);\n * obj.delete_at_index(index);\n */","__typename":"CodeSnippetNode"},{"lang":"PHP","langSlug":"php","code":"class MyLinkedList {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n     * @param Integer $index\n     * @return Integer\n     */\n    function get($index) {\n        \n    }\n  \n    /**\n     * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtHead($val) {\n        \n    }\n  \n    /**\n     * Append a node of value val to the last element of the linked list.\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtTail($val) {\n        \n    }\n  \n    /**\n     * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtIndex($index, $val) {\n        \n    }\n  \n    /**\n     * Delete the index-th node in the linked list, if the index is valid.\n     * @param Integer $index\n     * @return NULL\n     */\n    function deleteAtIndex($index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * $obj = MyLinkedList();\n * $ret_1 = $obj->get($index);\n * $obj->addAtHead($val);\n * $obj->addAtTail($val);\n * $obj->addAtIndex($index, $val);\n * $obj->deleteAtIndex($index);\n */","__typename":"CodeSnippetNode"},{"lang":"TypeScript","langSlug":"typescript","code":"class MyLinkedList {\n    constructor() {\n\n    }\n\n    get(index: number): number {\n\n    }\n\n    addAtHead(val: number): void {\n\n    }\n\n    addAtTail(val: number): void {\n\n    }\n\n    addAtIndex(index: number, val: number): void {\n\n    }\n\n    deleteAtIndex(index: number): void {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */","__typename":"CodeSnippetNode"}],"stats":"{\"totalAccepted\": \"78.2K\", \"totalSubmission\": \"311.9K\", \"totalAcceptedRaw\": 78233, \"totalSubmissionRaw\": 311901, \"acRate\": \"25.1%\"}","hints":[],"solution":{"id":"776","canSeeDetail":false,"paidOnly":true,"__typename":"ArticleNode"},"status":null,"sampleTestCase":"[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\n[[],[1],[3],[1,2],[1],[1],[1]]","metaData":"{\r\n    \"classname\": \"MyLinkedList\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"get\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"index\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the value of the index-th node in the linked list. If the index is invalid, return -1.\"\r\n        },\r\n        {\r\n            \"name\" : \"addAtHead\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\"\r\n        },\r\n        {\r\n            \"name\" : \"addAtTail\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Append a node of value val to the last element of the linked list.\"\r\n        },\r\n        {\r\n            \"name\" : \"addAtIndex\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"index\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\"\r\n        },\r\n        {\r\n            \"name\" : \"deleteAtIndex\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"index\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Delete the index-th node in the linked list, if the index is valid.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}","judgerAvailable":true,"judgeType":"large","mysqlSchemas":[],"enableRunCode":true,"enableTestMode":false,"enableDebugger":true,"envInfo":"{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 10 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.3.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.2.5</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.13</code>.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.8</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.40.0</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.3.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}","libraryUrl":null,"adminUrl":null,"__typename":"QuestionNode"}}}